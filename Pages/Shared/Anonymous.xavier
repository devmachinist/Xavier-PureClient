
  

<div id="${this.target}auth">
</div>




{{
let username = "";
var msalInstance = {};

function showWelcomeMessage(username){
  console.log(username);
}


async function selectAccount() {
var msalInstance = window.AuthService;
/**
* See here for more info on account retrieval:
* https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/Accounts.md
*/
await msalInstance.handleRedirectPromise();
var currentAccounts = msalInstance.getAllAccounts();
if (currentAccounts.length === 0) {
return;
}
else if (currentAccounts.length > 1) {
    // Add choose account code here
    console.warn("Multiple accounts detected.");
    selectAccount();
  }


  else if (currentAccounts.length === 1) {
    username = currentAccounts[0].username;
    showWelcomeMessage(username);
  }
}
function handleResponse(response) {

/**
* To see the full list of response object properties, visit:
* https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/request-response-object.md#response
*/

if (response !== null) {
username = response.account.username;
showWelcomeMessage(username);
} else {
selectAccount();
}
}

async function signIn() {
var msalInstance = window.AuthService;
await msalInstance.handleRedirectPromise();
console.log(window.AuthService);

msalInstance.loginRedirect()
.then(handleResponse)
.catch(error => {
console.error(error);
});
}
window.SignIn = () => signIn(); 
async function signOut() {

/**
* You can pass a custom request object below. This will override the initial configuration. For more information, visit:
* https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/request-response-object.md#request
*/
var msalInstance = window.AuthService;
await msalInstance.handleRedirectPromise();
const logoutRequest = {
account: msalInstance.getAccountByUsername(username),
postLogoutRedirectUri: msalConfig.auth.redirectUri,
mainWindowRedirectUri: msalConfig.auth.redirectUri
};

msalInstance.logoutRedirect(logoutRequest);
}

window.onload = () => {window.SignOut = signOut; };
async function getTokenRedirect(request) {
var msalInstance = window.AuthService;
await msalInstance.handleRedirectPromise();
request.account = msalInstance.getAccountByUsername(username);

return msalInstance.acquireTokenSilent(request)
.catch(error => {
console.warn("silent token acquisition fails. acquiring token using popup");
if (error instanceof msal.InteractionRequiredAuthError) {
// fallback to interaction when silent call fails
return msalInstance.acquireTokenPopup(request)
.then(tokenResponse => {
console.log(tokenResponse);
return tokenResponse;
}).catch(error => {
console.error(error);
});
} else {
console.warn(error);
}
});
}
async function loadView(){
  console.log("Loading ANON View");
try{
            if (window.AuthService) {
                 msalInstance = window.AuthService;
                msalInstance.handleRedirectPromise().then(handleResponse).catch(err => {
                  console.error(err);
                });
                 console.log(window.AuthService);
var currentAccounts = window.AuthService.getAllAccounts();
if (currentAccounts.length === 0) {
  var res = document.getElementById(`${this.target}auth`);
  console.log(res);
  if (res){
  await res.insertAdjacentHTML('afterbegin', username + `  ${this.InnerHTML}`)
  }
else if (currentAccounts.length > 1) {
    // Add choose account code here

      }
    }
   }
   }
catch(ex){console.log(ex);}
}
// Add an event listener
document.addEventListener("msal-init", function(e) {
loadView();

eval('./Xavier.js');
    var ev = new Event("DOMContentLoaded");
        try{
             window.addEventListener("DOMContentLoaded", ()=>{window['${this.Xid}1'].renderXidElements(document.body)});
             window.dispatchEvent(ev);

        }
        catch(ex){console.log(ex)}



});
}}