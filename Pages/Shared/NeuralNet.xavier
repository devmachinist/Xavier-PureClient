{{
import "/Xavier.ShopLite.js";
var config = ${this.InnerHTML};
var item = ${eval("(function(){return '`this is a string on the eval`'})()")}
console.log(item);
class AiLanguageModel {
  constructor(trainingData) {
    this.trainingData = []; // array to store training data
    this.probabilities = {}; // object to store the probabilities of each training input
  }

  // Method to add training data
  addTrainingData(data) {
    this.trainingData.push(data);
  }
  // Method to calculate the probabilities based on the training data
  calculateProbabilities() {
    // Iterate through all the training data
    this.trainingData.forEach(data => {
      // If the key is not in the probabilities object, create the key
      if(!this.probabilities.hasOwnProperty(data)) {
        this.probabilities[data] = {
          count: 0,
          probability: 0
        };
      }
      // Increment the count
      this.probabilities[data].count++;
      // Calculate the probability
      this.probabilities[data].probability = this.probabilities[data].count / this.trainingData.length;
    });
  }

  // Method to generate output based on the probabilities
  generateOutput(input) {
    // Iterate through all the probabilities
    for (let key in this.probabilities) {
      // If the input matches a probability, the probability is greater than the input, use the big probability
      if (key === input && this.probabilities[key].probability > this.probabilities[input].probability) {
        return key;
      // Else, return the small probability
      } else {
        return this.probabilities[input].probability;
      }
    }
  }
  // Method to generate code using the model
  generateCode(input) {
    let output = '';
    // Iterate through the input
    input.forEach(data => {
      // Generate output based on the probability
      output += this.generateOutput(data);
    });

    // Return the generated code
    return output;
  }
}

// Create a function to compress the code elements into human readable format
const compress = (code) => {
  let compressedCode = [];
  // Loop over each code element and get the text content
  for (let i = 0; i < code.length; i++) {
    let codeText = code[i].innerText;
    // Remove any blank lines
    // Push the text into an array
    compressedCode.push(codeText);
  }
  // Return the array of compressed code
  return compressedCode;
};
var ai = new AiLanguageModel(config);
window.ai = ai;
ai.addTrainingData(config);
ai.calculateProbabilities();
console.log(ai);
console.log(ai.generateCode(['"input":"can you answer a simple question yet?"']));
}}
