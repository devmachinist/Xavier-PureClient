  
  <!-- component -->

<style>
textarea:focus{
  outline:none;
}
.xin{
    background:black;
    color:white;
    width:100%;
    border:none !important;
    outline:none !important;
    resize:none;
    margin-top:20px;
    min-height:300px;
}

.xin:focus{
    background:black;
    color:white;
    width:100%;
    border:none !important;
    outline:none !important;
    --tw-ring-color: #0000;
}
.prompt{
    margin-bottom: -4em;
}
.terminal-sim{
    width:100%;
    margin:0px;
    padding-bottom:20px;
}
#terminal{
    background:black;
    color:white;
    margin-top:20px;
    padding-bottom:20px;
}

#terminal::after {
   content:"$";
   position: absolute;
   display:inline-block;
   margin: 40px 0px 0px 5px;
   color:blue;
   z-index:10;
}

</style>
  <div class="flex mx-0 w-full">
    <div class="flex w-full items-center mt-32 rounded-2xl shadow-2xl scrollbar subpixel-antialiased bg-black border-black mx-auto overflow-none flex-col">
      <div class="flex items-center h-6 mx-0 w-full rounded-t bg-gray-100 border-b border-gray-500 text-center text-black" id="headerTerminal">
        <div class="flex ml-2 items-center text-center border-red-900 bg-red-500 shadow-inner rounded-full w-3 h-3" id="closebtn">
        </div>
        <div class="ml-2 border-yellow-900 bg-yellow-500 shadow-inner rounded-full w-3 h-3" id="minbtn">
        </div>
        <div class="ml-2 border-green-900 bg-green-500 shadow-inner rounded-full w-3 h-3" id="maxbtn">
        </div>
        <div class="mx-auto pr-16" id="terminaltitle">
          <p class="text-center text-sm">${this.TerminalTitle}</p>

        </div>
      </div>
      <div id="terminal" class="scrollbar flex flex-col m-0 w-full rounded-2xl ">
        
      </div>
      <textarea id="input" class="scrollbar flex rounded-2xl p-4 mx-0 xin overflow ring-0 focus:ring-0 focus:outline-0" type="text"></textarea>
    </div>
  <form class="mt-24" id="user-input-form">
    <input type="text" id="user-input" />
    <button type="submit">Send</button>
  </form>
  <div id="chat-window"></div>
  </div>


  {{
function Terminal(){
  // Variables
  this.currentDirectory = "/"
  this.log = [];
  this.history = {};
  this.commands = {}; // Empty object to store command functions
  this.promptText = ''; // Prompt text
  this.input = ''; // User input text
  this.output = 'Hello, user... This is the new tailwind prompt from Xavier.... It can be a challenge to make cool toys... this one we think has great potential'; // Output text
  this.history = [];
  this.localStorageKey = 'powerShellLikeFileSystem';
  this.fileSystem = {};
  this.saveFileSystem = () => {
        localStorage.setItem(this.localStorageKey, JSON.stringify(this.fileSystem));
  }
  // Add Command Function
  this.addCommand = (commandName, commandFunc) => {
    this.commands[commandName] = commandFunc;
  };

  // Execute Command Function
  this.executeCommand = (commandText) => {
    var commandName = commandText.split(' ')[0];
    var commandArgs = commandText.split(' ').slice(1);
try{
    // Check if command exists
    if (this.commands[commandName]) {
      // Execute command
      this.commands[commandName](commandArgs);

    } else {
      // Set output text
      this.output = `Command not recognized: `+commandName;
    }
}catch(ex){this.output = "Error Detected: " + ex}
  };
  this.renderHTML = () => {
    let htmlText = '';
    let log = '';
    this.log.forEach((p) => {log += `<div class="block">`+p+`</div>`});
    htmlText += `<div class="terminal-sim flex flex-col items-start">`;
    htmlText += log;
    htmlText += `  <div class="relative prompt z-10">`+this.promptText+`</div>`;
    htmlText += `</div>`;
    return htmlText;
  }
  // Insert HTML Function
  this.insertHTML = (parentElement) => {
    parentElement.innerHTML = this.renderHTML();
  };

  // Built-In Commands
    // Command functions

  // Change directory
  this.cd = (args) => {
    var preDir = this.currentDirectory;
    var newPath = args[0] || '/';
    var pathParts = newPath.split('/');
    var currentPath = {};
    // Resolve relative paths
    if (newPath.startsWith('.')) {
      const currentPathParts = this.currentDirectory.split('/');
      currentPathParts.pop(); // Remove current directory
      pathParts.forEach((part) => {
        if (part === '..') {
          currentPathParts.pop();
        } else {
          currentPathParts.push(part);
        }
      });
      this.currentDirectory = currentPathParts.join('/');
    } else {
      this.currentDirectory = newPath;
    }
currentPath = this.fileSystem[this.currentDirectory]
    if (!currentPath || !currentPath.isDirectory) {
      this.output = this.currentDirectory+' Directory not found.';
      this.currentDirectory = preDir;
      return;
    }

    this.output = 'Current directory: '+this.currentDirectory;
  }

  // List files and directories
  this.ls = (args) => {
  this.output = "";
  var currentPath = this.fileSystem[this.currentDirectory];
    if (!currentPath || !currentPath.isDirectory) {
      this.output = 'Directory not found.';
      return;
    }
    currentPath.content.items.forEach((name) => {
      const item = this.fileSystem[item.fullname];
      const type = item.isDirectory ? 'Directory' : 'File';
      this.output = "";
      this.log.push(name + " " + type);
    });
  }

  // Create a new directory
  this.md = (args) => {
    var dirName = args[0];
    if (!dirName) {
      this.output = 'Please provide a directory name.';
      return;
    }
    var path = this.currentDirectory + '/' + dirName;
    path.replace("./","");
    
    if(dirName[0] === "/"){
    path = dirName
    }
    if (this.fileSystem[path]) {
      console.log('Directory already exists.');
      return;
    }
    var pathParts = path.split("/");
        pathParts.pop();
    var parPath = pathParts.join("/");
    if(this.currentDirectory === '/'){
      parPath = this.currentDirectory;
    }
    console.log(parPath)
    
    parent = this.fileSystem[parPath];
    parent.content.items = [];
    parent.content.items.push({fullname: path})
    this.fileSystem[path] = { isDirectory: true, content: {} };
    this.saveFileSystem();
    this.output = 'Created directory: '+path;
  }
  this.clear = () =>{
    this.log = [];
    this.output = "";
  }

  // Remove a file or directory
  this.rm = (args) => {
    var targetName = args[0];
    if (!targetName) {
      this.output = 'Please provide a target name.';
      return;
    }
    var targetPath = this.currentDirectory + '/' + targetName;
    var target = this.fileSystem[targetPath];
    if (!target) {
      this.output = 'File or directory not found.';
      return;
    }
    if (target.isDirectory) {
      if (Object.keys(target.content).length > 0) {
        this.output = 'Directory is not empty. Use "rm -Force" to delete it.';
        return;
      }
      delete this.fileSystem[targetPath];
      this.saveFileSystem();
      this.output = 'Deleted directory: ' +targetPath;
    } else {
      delete this.fileSystem[targetPath];
      this.saveFileSystem();
      this.output = 'Deleted file: ' + targetPath;
    }
  }

  // Create a new file
  this.newFile = (args) => {
    var fileName = args[0];
    if (!fileName) {
      console.log('Please provide a file name.');
      return;
    }
    var filePath = this.currentDirectory + '/' + fileName;
    if (this.fileSystem[filePath]) {
      this.output = 'File already exists.';
      return;
    }
    this.fileSystem[filePath] = { isDirectory: false, content: '' };
    this.saveFileSystem();
    this.output = 'Created file: '+ filePath;
  }
}

var term = document.getElementById("terminal");
var termback = new Terminal();
// termback.addCommand('cd', termback.cd.bind(termback));
// termback.addCommand('ls', termback.ls.bind(termback));
// termback.addCommand('md', termback.md.bind(termback));
// termback.addCommand('rm', termback.rm.bind(termback));
// termback.addCommand('del', termback.rm.bind(termback))
// termback.addCommand('clear', termback.clear.bind(termback))

// termback.addCommand('new-item', termback.newFile.bind(termback));
    // Load file system from localStorage if available
    var savedFileSystem = localStorage.getItem(termback.localStorageKey);
    if (savedFileSystem) {
      termback.fileSystem = JSON.parse(savedFileSystem);
    }

var inString = false;
var bookmark = -1;
termback.insertHTML(term);
var input = document.getElementById("input");

if(input){
termback.addCommand('clear',() => termback.clear());
termback.addCommand('askai',async () => await handleUserInput(input));
    input.addEventListener('keyup', (e) => {
        console.log(e);
        termback.input = input.value;
            if (e.keyCode == 38 || e.key === 'ArrowUp')
            {
                bookmark++
                if(bookmark > termback.history.length-1){
                    bookmark = termback.history.length;
                }
                input.value = termback.history[bookmark];
            }
            if (e.keyCode == 40 || e.key === 'ArrowDown')
            {
                bookmark--
                if(bookmark < 0){
                    bookmark = -1;
                       input.value = "";
                }
                else{
                    input.value = termback.history[bookmark];
                }
            }
        
            if (e.keyCode == 10 || e.keyCode == 13) // && e.ctrlKey to add the control key
            {
                console.log("Exectuting Command: " + input.value);
                try{
                    termback.log.push(termback.input);
                    termback.history.unshift(termback.input);
                    if(!term.inString){
                        var commands = input.value.slice(";");
                        if(Array.isArray(commands)){
                            commands.forEach((Input) => {
                                termback.executeCommand(Input);
                                termback.log.push(termback.output);
                            });
                        }
                        else{
                            termback.executeCommand(termback.input);
                            termback.log.push(termback.output);
                        }
                    }
                }catch(ex){termback.log.push(ex);}
                termback.insertHTML(term);
            }
      });
}
else{
  console.log("no input detected... make sure to add your id tag");
}
// gpt4Chat.js

var apiKey = '${this.OpenAIKey}'; // Replace with your actual API key
var apiEndpoint = 'https://api.openai.com/v1/chat/completions';

console.log(apiKey);
async function generateResponse(messages) {
  var hedrs = new Headers();
  hedrs.append("Content-Type","application/json");
  hedrs.append("Authorization", "Bearer " + apiKey)
  
  const requestBody = messages;


  const req =  JSON.stringify({"model":"gpt-4", "messages": requestBody})
  var reqOpts = {
    method: 'POST',
    headers: hedrs,
    body: req,
    redirect: 'follow'
  }
    console.log(req);
  try {
    const response = await fetch(apiEndpoint, reqOpts);
  console.log(requestBody);
    if (!response.ok) {
      console.log(response);
      throw new Error('Failed to generate response from GPT-4.');
    }
    const { choices } = await response.json();
    const chatbotResponse = choices[0].message.content;
    return chatbotResponse;
  } catch (error) {
    termback.log.push('Error: '+ error.message);
    return "";
  }
}

// Helper function to render a message in the chat window
function renderMessage(sender, content) {
  termback.input = "";
  termback.output = "";
  termback.log.push('<strong>'+sender+':</strong> '+content);
  termback.insertHTML(term);
}

// Retrieve messages from localStorage if any
const storedMessages = localStorage.getItem('chatMessages')?? "";
const chatMessages = storedMessages ? JSON.parse(storedMessages) : [];
function rmMessages(){
  localStorage.removeItem('chatMessages');
}
termback.addCommand("clear-gpt", () => {rmMessages()});

// Helper function to save messages to localStorage
function saveMessages() {
  localStorage.setItem('chatMessages', JSON.stringify(chatMessages));
}
// Load GPT-4 model (Assuming you have GPT-4 implemented as a separate file)
// Function to handle user input and generate responses
async function handleUserInput(_userInput) {
  var userInput = _userInput.value;
  var message = _userInput.value.split(" ");
  var midmessage = message.splice(1);
  console.log("message = "+message);
  console.log("midmessage = "+midmessage);
  var transformMessage = "";
  midmessage.forEach((word)=>{transformMessage += " "+word})

  // Save user input to messages
  chatMessages.push({ role: 'user', content: transformMessage });
  saveMessages();

  // Render user message
  renderMessage('user', userInput);

  // Generate response using GPT-4 model
  const response = await generateResponse(chatMessages);
  if(response.length > 0){
  // Save the response to messages
  chatMessages.push({ role: 'assistant', content: response });
  saveMessages();
  }
  // Render chatbot response
  renderMessage('assistant', response);

  // Clear user input field
  document.getElementById('input').value = '';
}



// Load chat messages from localStorage and render them
function loadChatMessages() {
  chatMessages.forEach(message => {
    renderMessage(message.role, message.content);
  });
}

// Call the function to load chat messages when the page loads
loadChatMessages();


}}
